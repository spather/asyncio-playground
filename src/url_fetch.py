"""Coding challenge generated by ChatGPT:
Problem Statement:

* You are given a list of URLs to fetch data from. Write an asynchronous Python function using asyncio that takes this list of URLs and fetches the content from each URL concurrently.
* The function should return a list of results containing the content from each URL.
* Consider error handling for cases where a URL fetch might fail.

Skills Tested: Basic understanding of asyncio, concurrent execution, error handling in async code.
"""
import aiohttp
import asyncio


async def fetch_url(session: aiohttp.ClientSession, url: str):
    try:
        async with session.get(url) as resp:
            if resp.status == 200:
                text = await resp.text()
                return {
                    "type": "success",
                    "text": text,
                }
            else:
                return {
                    "type": "http_error",
                    "status_code": resp.status,
                }
    # In theory, could also catch a bunch of other exceptions
    # here, but just including this one to demonstrate how it
    # would work.
    except aiohttp.ClientConnectionError as ex:
        return {"type": "connection_error", "exception": ex}


async def main():
    urls = [
        "http://httpbin.org/get",
        "https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt",
        "http://httpbin.org/image",
        "http://httpbin.org/status/404",
        "http://nonexistenturl1abdb2312.com",
    ]

    async with aiohttp.ClientSession() as session:
        results = await asyncio.gather(*[fetch_url(session, url) for url in urls])

    for url, result in zip(urls, results):
        if result["type"] == "success":
            print(f"{url} - SUCCESS: \n{result['text'][:100]}")
        elif result["type"] == "http_error":
            print(f"{url} - HTTP Error Code {result['status_code']}")
        elif result["type"] == "connection_error":
            print(f"{url} - CONNECTION Error {result['exception']}")
        else:
            print(f"Unknown result type {result['type']}")
        print()


if __name__ == "__main__":
    asyncio.run(main())
